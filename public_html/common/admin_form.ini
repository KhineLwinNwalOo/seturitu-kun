<?php
/*
 * [新★会社設立.JP ツール]
 * マスタ情報の入力フォームを作成する。
 *
 * 更新履歴：2008/12/01	d.ishikawa	新規作成
 *
 */

include_once(dirname(__FILE__)."/constants.ini");
include_once(dirname(__FILE__)."/constants_db.ini");
include_once(dirname(__FILE__)."/db.ini");
include_once(dirname(__FILE__)."/util.ini");
include_once(dirname(__FILE__)."/log.ini");
include_once(dirname(__FILE__)."/form.ini");




/**
 * マスタ情報の入力一覧表を作成する。
 *
 * @param	array	$xmlList			XMLを読み込んだ配列
 * @param	array  	$info				初期値
 * @param	int  	$tabindex			タブインデックス
 * @param	int  	$authId				権限ID
 * @param	boolean	$undeleteOnly		未削除データのみ取得するか？{true:未削除データ対象/false:全データ対象}
 * @param	boolean	$messageTag			メッセージのタグを有効にするか？{true:有効にする/false:無効にする}
 * @return	string	レンタル料金表の文字列
 * @access  public
 * @since
 */
function _GetMasterTable($xmlList, $info, &$tabindex, $authId, $undeleteOnly = true, $messageTag = false) {

	_Log("[_GetMasterTable] start.");

    _Log("[_GetMasterTable] (param) XMLを読み込んだ配列 = '".print_r($xmlList,true)."'");
    _Log("[_GetMasterTable] (param) 初期値 = '".print_r($info,true)."'");
    _Log("[_GetMasterTable] (param) タブインデックス = '".$tabindex."'");
    _Log("[_GetMasterTable] (param) 権限ID = '".$authId."'");
    _Log("[_GetMasterTable] (param) 未削除データのみ取得するか？{true:未削除データ対象/false:全データ対象} = '".$undeleteOnly."'");
    _Log("[_GetMasterTable] (param) メッセージのタグを有効にするか？{true:有効にする/false:無効にする} = '".$messageTag."'");


	//入力一覧表を垂直方向にするか？{true:垂直方向(デフォルト)/false:水平方向}
	$verticalDirection = true;
	if (isset($info['condition']['condition_vertical_direction_flag'])) $verticalDirection = $info['condition']['condition_vertical_direction_flag'];

    _Log("[_GetMasterTable] 入力一覧表を垂直方向にするか？{true:垂直方向/false:水平方向} = '".$verticalDirection."'");

	//入力一覧表の新規追加分を常にN個追加するか？{true:常にN個追加する(デフォルト)/false:合計N個になるように追加する}
	$addTypeFlag = true;
	if (isset($info['condition']['condition_add_type_flag'])) $addTypeFlag = $info['condition']['condition_add_type_flag'];

	//入力一覧表の新規追加分は必須項目としない？入力一覧表の全てが新規追加分の場合、1つ目は必須項目とするか？{true:必須としない(デフォルト)/false:1つ目は必須とする}
	$addRequiredFlag = true;
	if (isset($info['condition']['condition_add_required_flag'])) $addRequiredFlag = $info['condition']['condition_add_required_flag'];

	//入力一覧表に新規追加分を追加するか？{true:追加する(デフォルト)/false:追加しない}
	$addFlag = true;
	if (isset($info['condition']['condition_add_flag'])) $addFlag = $info['condition']['condition_add_flag'];



	//DBをオープンする。
	$link = _DB_Open();

	//テーブルのフィールド情報を取得する。→maxlengthに使用する。
	$colInfo = _DB_GetColumnsInfo($info['condition']['mst_name']);

	//XMLから該当のマスタの情報を取得する。
	$xmlSubList = $xmlList[$info['condition']['mst_name']];


	if (isset($info['update'])) {
		//更新情報が設定されている場合、設定された更新情報を表示する。
		$tblList = $info['update'];
	} else {
		//更新情報が設定されていない場合、DBに登録されている情報を表示する。
		//マスタ情報を取得する。
		$tblList = _DB_GetList($info['condition']['mst_name'], $info['condition'], $undeleteOnly);
		if (_IsNull($tblList)) {
			$tblList = array();
		} else {
			//項目内に子テーブル(関連テーブル)への登録がある場合、子テーブルからも登録値を取得する。
			if (isset($xmlSubList['update'])) {
				foreach ($xmlSubList['update']['item'] as $itemKey => $itemInfo) {
					if (isset($itemInfo['child_table_name']) && !_IsNull($itemInfo['child_table_name'])) {
						//マスタ情報に子テーブル(関連テーブル)の情報を追加する。
						foreach ($tblList as $key => $tblInfo) {
							//子テーブルの検索条件を設定する。
							$condition = array();
							//親テーブルの値を子テーブルの項目の条件とする。(親テーブル.ID→子テーブル.ID)
							$condition[$itemInfo['child_table_condition_key']] = $tblInfo[$itemInfo['parent_table_condition_key']];
							//子テーブル情報を取得する。
							$tblChildList = _DB_GetList($itemInfo['child_table_name'], $condition, $undeleteOnly);

							//子テーブルの情報を追加する。
							$tblInfo[$itemInfo['name']] = $tblChildList;
							$tblList[$key] = $tblInfo;
						}
					}
				}
			}
		}



//		//主キーの検索条件は、新規追加分の初期値に設定する。
//		$defInfo = array();
//		foreach ($colInfo as $key => $col) {
//			//オートインクリメントの場合、初期値として設定しない。
//			if ($col['Extra'] == 'auto_increment') continue;
//			//主キーは、初期値とする。
//			if ($col['Key'] == 'PRI') 	$defInfo[$col['Field']] = $info['condition'][$col['Field']];
//		}

		//検索条件の内、初期値にするものを設定する。
		$defInfo = array();
		if (isset($xmlSubList['condition'])) {
			foreach ($xmlSubList['condition']['item'] as $itemKey => $itemInfo) {
				if ($itemInfo['default']) {
					$defInfo[$itemInfo['name']] = $info['condition'][$itemInfo['name']];
				}
			}
		}

		if ($addFlag) {
			//新規追加分の情報を追加する。
			$addCount = ADMIN_ADD_COUNT;
			if (!$verticalDirection) {
				//水平方向の場合
				if (!_IsNull(ADMIN_ADD_COUNT_HORIZONTAL)) {
					$addCount = ADMIN_ADD_COUNT_HORIZONTAL;
				}
			}
			if ($addTypeFlag) {
				//常にN個を追加する。
				for ($i = 1; $i <= $addCount; $i++) {
					$defInfo['show_no'] = '+'.$i;

					if ($addRequiredFlag) {
						$tblList['add_'.$i] = $defInfo;
					} else {
						if (count($tblList) == 0) {
							//入力一覧表の全てが新規追加分の場合、1つ目は必須項目とする。
							$tblList['req_add_'.$i] = $defInfo;
						} else {
							$tblList['add_'.$i] = $defInfo;
						}
					}
				}
			} else {
				//合計N個になるように足りない分のみ追加する。
				$i = 0;
				while (count($tblList) < $addCount) {
					$i++;
					$defInfo['show_no'] = '+'.$i;

					if ($addRequiredFlag) {
						$tblList['add_'.$i] = $defInfo;
					} else {
						if (count($tblList) == 0) {
							//入力一覧表の全てが新規追加分の場合、1つ目は必須項目とする。
							$tblList['req_add_'.$i] = $defInfo;
						} else {
							$tblList['add_'.$i] = $defInfo;
						}
					}

				}
			}
		}
	}

	//文字をHTMLエンティティに変換する。
	$info = _HtmlSpecialCharsForArray($info);
	//文字をHTMLエンティティに変換する。
	$tblList = _HtmlSpecialCharsForArray($tblList);



	_Log("[_GetMasterTable] 更新情報 = '".print_r($tblList,true)."'");



	$res = null;

	//タイトルを設定する。
	$res .= "<h2>";
	$res .= $xmlSubList['title'];
	$res .= "</h2>";
	$res .= "\n";

	//検索条件を設定する。
	if (isset($xmlSubList['condition'])) {
		$res .= "<h3>";
		$res .= $xmlSubList['condition']['sub_title'];
		$res .= "</h3>";
		$res .= "\n";
		$res .= "<form id=\"frmSelect\" name=\"frmSelect\" action=\"".$_SERVER['PHP_SELF']."\" method=\"post\">";
		$res .= "\n";

		//権限で表示しない項目は、hiddenで設定する。
		$hiddenCondition4auth = null;

		foreach ($xmlSubList['condition']['item'] as $itemKey => $itemInfo) {

			//権限チェック
			if ($authId != AUTH_WOOROM) {
				//WOOROM権限以外の場合、表示しない。
				if ($itemInfo['auth'] == AUTH_WOOROM) {
					if (isset($info['condition'][$itemInfo['name']])) {
						switch (gettype($info['condition'][$itemInfo['name']])) {
							case 'array':
								foreach ($info['condition'][$itemInfo['name']] as $cKey => $cValue) {
									$hiddenCondition4auth .= "<input type=\"hidden\" name=\"condition[".$itemInfo['name']."][]\" value=\"".$cValue."\" />";
									$hiddenCondition4auth .= "\n";
								}
								break;
							default:
								$hiddenCondition4auth .= "<input type=\"hidden\" name=\"condition[".$itemInfo['name']."]\" value=\"".$info['condition'][$itemInfo['name']]."\" />";
								$hiddenCondition4auth .= "\n";
								break;
						}
					}
					continue;
				}
			}


			if (isset($itemInfo['prefix_msg']) && !_IsNull($itemInfo['prefix_msg'])) {
				//if (!_IsNull($res)) $res .= "\n";
				$res .= $itemInfo['prefix_msg'];
			}
			if (isset($itemInfo['prefix_html']) && !_IsNull($itemInfo['prefix_html'])) {
				//if (!_IsNull($res)) $res .= "\n";
				$res .= $itemInfo['prefix_html'];
			}
			if (isset($itemInfo['prefix']) && !_IsNull($itemInfo['prefix'])) {
				//if (!_IsNull($res)) $res .= "\n";
				$res .= $itemInfo['prefix'];
			}

			switch ($itemInfo['type']) {
				case 'text':
					$res .= "<input type=\"text\" name=\"condition[".$itemInfo['name']."]\" size=\"".$itemInfo['size']."\" maxlength=\"".$itemInfo['maxlength']."\" tabindex=\"".(++$tabindex)."\" value=\"".$info['condition'][$itemInfo['name']]."\" />";
					break;
				case 'textarea':
					$res .= "<textarea name=\"condition[".$itemInfo['name']."]\" rows=\"".$itemInfo['rows']."\" cols=\"".$itemInfo['cols']."\" tabindex=\"".(++$tabindex)."\">".$info['condition'][$itemInfo['name']]."</textarea>";
					break;
				case 'select':
					$itemInfo['parameter']['name'] = "condition[".$itemInfo['name']."]";
					$itemInfo['parameter']['default'] = $info['condition'][$itemInfo['name']];
					$itemInfo['parameter']['tabindex'] = (++$tabindex);
					$res .= _GetSelect4Array($itemInfo['parameter']);
					break;
				case 'radio':
					$itemInfo['parameter']['name'] = "condition[".$itemInfo['name']."]";
					$itemInfo['parameter']['default'] = $info['condition'][$itemInfo['name']];
					$itemInfo['parameter']['tabindex'] = (++$tabindex);
					$res .= _GetRadio4Array($itemInfo['parameter'], $tabindex);
					break;
				case 'checkbox':
					$itemInfo['parameter']['name'] = "condition[".$itemInfo['name']."]";
					$itemInfo['parameter']['default'] = $info['condition'][$itemInfo['name']];
					$itemInfo['parameter']['tabindex'] = (++$tabindex);
					$res .= _GetCheckbox4Array($itemInfo['parameter'], $tabindex);
					break;
				case 'hidden':
					$res .= "<input type=\"hidden\" name=\"condition[".$itemInfo['name']."]\" value=\"".$info['condition'][$itemInfo['name']]."\" />";
					break;
				case 'xxx':
					break;
			}

			if (isset($itemInfo['suffix']) && !_IsNull($itemInfo['suffix'])) {
				//if (!_IsNull($res)) $res .= "\n";
				$res .= $itemInfo['suffix'];
			}
			if (isset($itemInfo['suffix_html']) && !_IsNull($itemInfo['suffix_html'])) {
				//if (!_IsNull($res)) $res .= "\n";
				$res .= $itemInfo['suffix_html'];
			}
			if (isset($itemInfo['suffix_msg']) && !_IsNull($itemInfo['suffix_msg'])) {
				//if (!_IsNull($res)) $res .= "\n";
				$res .= $itemInfo['suffix_msg'];
			}

		}
		$res .= "\n";

		//権限で表示しない項目は、hiddenで設定する。
		$res .= $hiddenCondition4auth;

		$submitOption = null;
		if (isset($xmlSubList['condition']['option']) && !_IsNull($xmlSubList['condition']['option'])) {
			$submitOption = $xmlSubList['condition']['option'];
		}

		$res .= "<input class=\"submit\" type=\"submit\" name=\"select\" value=\"　選　択　\" tabindex=\"".(++$tabindex)."\" ".$submitOption."/>";
		$res .= "\n";
		$res .= "</form>";
		$res .= "\n";
	}

	//入力項目一覧を設定する。
	if (isset($xmlSubList['update'])) {
		$res .= "<h3>";
		$res .= $xmlSubList['update']['sub_title'];
		$res .= "</h3>";
		$res .= "\n";

		//メッセージを設定する。
		$error = null;
		if (isset($info['message']) && !_IsNull($info['message'])) {
			$bufMessage = $info['message'];
			if ($messageTag) {
				//HTMLエンティティを適切な文字に変換する。
				$bufMessage = html_entity_decode($bufMessage);
			}
			$addClass = null;
			//エラーが有る場合、文字色を変更する。
			if (isset($info['error'])) $addClass = "errorMessage";
			$res .= "<div class=\"message ".$addClass."\">";
			$res .= "\n";
			$res .= nl2br($bufMessage);
			$res .= "\n";
			$res .= "</div>";
			$res .= "\n";
		}

		//メッセージを設定する。
		//入力一覧表に表示するデータが存在しない場合、エラーメッセージを表示する。
		if (_IsNull($tblList) || count($tblList) == 0) {
			//エラーが有る場合、文字色を変更する。
			$res .= "<div class=\"message errorMessage\">";
			$res .= "\n";
			$res .= "該当の情報は存在しません。";
			$res .= "\n";
			$res .= "</div>";
			$res .= "\n";
		} else {
			//説明を設定する。
			$res .= "<div class=\"explain\">";
			$res .= "\n";
			$res .= "<a href=\"#\" title=\"説明\" onclick=\"openBox('explain_sub', 'explain', 'explain_close'); return false;\">[説明]</a>";
			$res .= "\n";
			$res .= "<br />";
			$res .= "\n";
			$res .= "<ul id=\"explain_sub\">";
			$res .= "\n";
			$res .= "<li>";
			$res .= "※は、必須項目です。";
			$res .= "</li>";
			$res .= "\n";
			$res .= "<li>";
			$res .= "No.に&quot;&nbsp;+&nbsp;&quot;が付いてる行は、新規登録用です。";
			$res .= "</li>";
			$res .= "<li>";
			$res .= "新規登録の場合、必須項目を全て入力しないと登録されません。";
			$res .= "</li>";
			$res .= "\n";
	//		$res .= "<li>";
	//		$res .= "&quot;非公開&quot;をチェックすると、公開されません。";
	//		$res .= "</li>";
	//		$res .= "\n";
			$res .= "</ul>";
			$res .= "\n";
			$res .= "</div>";
			$res .= "\n";

			//フォームを設定する。
			$res .= "<form id=\"frmUpdate\" name=\"frmUpdate\" action=\"".$_SERVER['PHP_SELF']."\" method=\"post\">";
			$res .= "\n";

			$res .= "<div class=\"formWrapper\">";
			$res .= "\n";

			$buf = null;
			if (isset($xmlSubList['condition'])) {
				foreach ($xmlSubList['condition']['item'] as $itemKey => $itemInfo) {
					if (isset($itemInfo['selected'])) {
						if (isset($itemInfo['parameter'])) {
							$mstList = $itemInfo['parameter']['list'];
							$mstInfo = $mstList[$info['condition'][$itemInfo['name']]];
							if (isset($itemInfo['selected']['show_item'])) {
								foreach ($itemInfo['selected']['show_item'] as $sKey => $sInfo) {
									$buf .= "<dt>";
									$buf .= $sInfo['label'];
									$buf .= "</dt>";
									$buf .= "\n";
									$buf .= "<dd>";
									$buf .= $mstInfo[$sInfo['name']]."";
									$buf .= "</dd>";
									$buf .= "\n";
								}
							}
						}
					}
				}

			}
			if (!_IsNull($buf)) {
				$res .= "<div class=\"formSelectedCondition\">";
				$res .= "\n";
				$res .= "<dl>";
				$res .= "\n";
				$res .= $buf;
				$res .= "</dl>";
				$res .= "\n";
				$res .= "</div>";
				$res .= "\n";
			}


			$res .= "<div class=\"formList\">";
			$res .= "\n";

			if ($verticalDirection) {
				//垂直方向の場合
				$res .= _GetMasterTableVertical($xmlSubList, $colInfo, $info, $tblList, $tabindex, $authId);
			} else {
				//水平方向の場合
				$res .= _GetMasterTableHorizontal($xmlSubList, $colInfo, $info, $tblList, $tabindex, $authId);
			}

			$res .= "</div>\n";
			$res .= "</div>\n";

			$res .= "<div class=\"button\">";
			$res .= "\n";
			$res .= "<input class=\"submit\" type=\"submit\" name=\"go\" value=\"　更　新　\" tabindex=\"".(++$tabindex)."\" />";
			$res .= "\n";
			$res .= "</div>";
			$res .= "\n";

			//検索条件をhiddenで設定する。
			$condition4hidden = array();
			$condition4hidden['condition'] = $info['condition'];
			$res .= _CreateHidden($condition4hidden);


			$res .= "</form>";
			$res .= "\n";

		}

	}


	_Log("[_GetMasterTable] 結果 = '".$res."'");

	//DBをクローズする。
	_DB_Close($link);
	_Log("[_GetMasterTable] end.");

	return $res;

}

/*垂直*/
/**
 * マスタ情報の入力一覧表を作成する。
 * 垂直方向に伸びるテーブルを作成する。
 *
 * @param	array	$xmlSubList		XMLを読み込んだ配列の一部
 * @param	array  	$colInfo		テーブルのフィールド情報
 * @param	int  	$info			初期値
 * @param	array  	$tblList		更新情報
 * @param	int  	$tabindex		タブインデックス
 * @param	int  	$authId			権限ID
 * @param	boolean	$undeleteOnly	未削除データのみ取得するか？{true:未削除データ対象/false:全データ対象}
 * @return	string	垂直方向テーブルの文字列
 * @access  public
 * @since
 */
function _GetMasterTableVertical($xmlSubList, $colInfo, $info, $tblList, &$tabindex, $authId) {
	_Log("[_GetMasterTableVertical] start.");

    _Log("[_GetMasterTableVertical] (param) XMLを読み込んだ配列の一部 = '".print_r($xmlSubList,true)."'");
    _Log("[_GetMasterTableVertical] (param) テーブルのフィールド情報 = '".print_r($colInfo,true)."'");
    _Log("[_GetMasterTableVertical] (param) 更新情報 = '".print_r($tblList,true)."'");
    _Log("[_GetMasterTableVertical] (param) タブインデックス = '".$tabindex."'");
    _Log("[_GetMasterTableVertical] (param) 権限ID = '".$authId."'");

	if (_IsNull($tblList) || count($tblList) == 0) {
		_Log("[_GetMasterTableVertical] 更新情報 が無い。");
		_Log("[_GetMasterTableVertical] end.");
		return null;
	}


	$res = null;
	$res .= "<table>";
	$res .= "\n";
	//ヘッダー行(項目名)を設定する。
	$res .= "<thead>";
	$res .= "\n";
	$res .= "<tr>";
	$res .= "\n";
	$res .= "<td>";
	$res .= "No";
	$res .= "</td>";
	$res .= "\n";
	foreach ($xmlSubList['update']['item'] as $itemKey => $itemInfo) {
		//権限チェック
		if ($authId != AUTH_WOOROM) {
			//WOOROM権限以外の場合、表示しない。
			if ($itemInfo['auth'] == AUTH_WOOROM) continue;
		}

		//ツールチップを設定する。
		$toolTip = null;
		if (isset($itemInfo['tool_tip_title']) && !_IsNull($itemInfo['tool_tip_title'])) {
			$toolTip .= $itemInfo['tool_tip_title'];
		}
		if (isset($itemInfo['tool_tip_text']) && !_IsNull($itemInfo['tool_tip_text'])) {
			$toolTip .= "::";
			$toolTip .= $itemInfo['tool_tip_text'];
		}

		$res .= "<td";
		if (!_IsNull($toolTip)) $res .= " class=\"tips\" title=\"".$toolTip."\"";
		$res .= ">";
		$res .= $itemInfo['label']."";
		if ($itemInfo['required']) $res .= "<span class=\"required\">※</span>";
		$res .= "</td>";
		$res .= "\n";
	}
	$res .= "</tr>";
	$res .= "\n";
	$res .= "</thead>";
	$res .= "\n";
	$res .= "<tbody>";
	$res .= "\n";

	//権限で表示しない項目は、hiddenで設定する。
	$hidden4auth = null;

	foreach ($tblList as $key => $tblInfo) {
		$res .= "<tr>";
		$res .= "\n";

		$res .= "<td class=\"colHead\">";
		$res .= "\n";
		$buf = null;
		if (_IsNull($tblInfo['show_no'])) {
			$buf = $key + 1;
		} else {
			$buf = $tblInfo['show_no'];
		}
		$res .= $buf;
		$res .= "<input type=\"hidden\" name=\"update[".$key."][show_no]\" value=\"".$buf."\" />";
		$res .= "\n";
		$res .= "</td>";
		$res .= "\n";

		foreach ($xmlSubList['update']['item'] as $itemKey => $itemInfo) {

			//権限チェック
			if ($authId != AUTH_WOOROM) {
				//WOOROM権限以外の場合、表示しない。
				if ($itemInfo['auth'] == AUTH_WOOROM) {
					$hidden4auth .= "<input type=\"hidden\" name=\"update[".$key."][".$itemInfo['name']."]\" value=\"".$tblInfo[$itemInfo['name']]."\" />";
					$hidden4auth .= "\n";
					continue;
				}
			}


			$res .= "<td>";
			$res .= "\n";

			$error = null;
			if (isset($info['error'][$key][$itemInfo['name']])) {
				$error = "class=\"error\"";
			}

			switch ($itemInfo['type']) {
				case 'text':
					$res .= "<input type=\"text\" name=\"update[".$key."][".$itemInfo['name']."]\" size=\"".$itemInfo['size']."\" maxlength=\"".$colInfo[$itemInfo['name']]['Size']."\" tabindex=\"".(++$tabindex)."\" value=\"".$tblInfo[$itemInfo['name']]."\" ".$error." />";
					break;
				case 'textarea':
					$res .= "<textarea name=\"update[".$key."][".$itemInfo['name']."]\" rows=\"".$itemInfo['rows']."\" cols=\"".$itemInfo['cols']."\" tabindex=\"".(++$tabindex)."\" ".$error.">".$tblInfo[$itemInfo['name']]."</textarea>";
					break;
				case 'select':
					$itemInfo['parameter']['name'] = "update[".$key."][".$itemInfo['name']."]";
					$itemInfo['parameter']['default'] = $tblInfo[$itemInfo['name']];
					$itemInfo['parameter']['tabindex'] = (++$tabindex);
					$itemInfo['parameter']['option'] = $error;
					$res .= _GetSelect4Array($itemInfo['parameter']);
					break;
				case 'radio':
					$itemInfo['parameter']['name'] = "update[".$key."][".$itemInfo['name']."]";
					$itemInfo['parameter']['default'] = $tblInfo[$itemInfo['name']];
					$itemInfo['parameter']['tabindex'] = (++$tabindex);
					$itemInfo['parameter']['option'] = $error;
					$res .= _GetRadio4Array($itemInfo['parameter'], $tabindex);
					break;
				case 'checkbox':
					$itemInfo['parameter']['name'] = "update[".$key."][".$itemInfo['name']."]";
					$itemInfo['parameter']['default'] = $tblInfo[$itemInfo['name']];
					$itemInfo['parameter']['tabindex'] = (++$tabindex);
					$itemInfo['parameter']['option'] = $error;
					$res .= _GetCheckbox4Array($itemInfo['parameter'], $tabindex);
					break;
				case 'hidden':
					$res .= "<input type=\"hidden\" name=\"update[".$key."][".$itemInfo['name']."]\" value=\"".$tblInfo[$itemInfo['name']]."\" />";
					break;
				case 'flag':
					$checked = null;
					if ($tblInfo[$itemInfo['name']] == '1') $checked = "checked=\"checked\"";
					$res .= "<input type=\"checkbox\" name=\"update[".$key."][".$itemInfo['name']."]\" tabindex=\"".(++$tabindex)."\" value=\"1\" ".$checked." />";
					break;
				case 'label':
					$res .= $tblInfo[$itemInfo['name']];
					$res .= "<input type=\"hidden\" name=\"update[".$key."][".$itemInfo['name']."]\" value=\"".$tblInfo[$itemInfo['name']]."\" />";
					break;
				case 'label_only':
					$res .= "&nbsp;";
					break;
				case 'select_plan_details':

					//プラン詳細マスタの情報を取得する。
					$mstList = $itemInfo['parameter']['list'];
					//プラン詳細マスタの情報の内、自分のプランの情報のみ取得し、上書きする。
					$itemInfo['parameter']['list'] = $mstList[$tblInfo['plan_id']];


					$itemInfo['parameter']['name'] = "update[".$key."][".$itemInfo['name']."]";
					$itemInfo['parameter']['default'] = $tblInfo[$itemInfo['name']];
					$itemInfo['parameter']['tabindex'] = (++$tabindex);
					$itemInfo['parameter']['option'] = $error;
					$res .= _GetSelect4Array($itemInfo['parameter']);
					break;



				case 'xxx':
					break;
			}
			$res .= "\n";
			$res .= "</td>";
			$res .= "\n";
		}
		$res .= "</tr>";
		$res .= "\n";
	}
	$res .= "</tbody>\n";

	$res .= "</table>\n";
	$res .= $hidden4auth;

	_Log("[_GetMasterTableVertical] 結果 = '".$res."'");
	_Log("[_GetMasterTableVertical] end.");
	return $res;
}
/*水平*/
/**
 * マスタ情報の入力一覧表を作成する。
 * 水平方向に伸びるテーブルを作成する。
 *
 * @param	array	$xmlSubList		XMLを読み込んだ配列の一部
 * @param	array  	$colInfo		テーブルのフィールド情報
 * @param	array  	$info			初期値
 * @param	array  	$tblList		更新情報
 * @param	int  	$tabindex		タブインデックス
 * @param	int  	$authId			権限ID
 * @param	boolean	$undeleteOnly	未削除データのみ取得するか？{true:未削除データ対象/false:全データ対象}
 * @return	string	水平方向テーブルの文字列
 * @access  public
 * @since
 */
function _GetMasterTableHorizontal($xmlSubList, $colInfo, $info, $tblList, &$tabindex, $authId) {
	_Log("[_GetMasterTableHorizontal] start.");

    _Log("[_GetMasterTableHorizontal] (param) XMLを読み込んだ配列の一部 = '".print_r($xmlSubList,true)."'");
    _Log("[_GetMasterTableHorizontal] (param) テーブルのフィールド情報 = '".print_r($colInfo,true)."'");
    _Log("[_GetMasterTableHorizontal] (param) 更新情報 = '".print_r($tblList,true)."'");
    _Log("[_GetMasterTableHorizontal] (param) タブインデックス = '".$tabindex."'");
    _Log("[_GetMasterTableHorizontal] (param) 権限ID = '".$authId."'");

	if (_IsNull($tblList) || count($tblList) == 0) {
		_Log("[_GetMasterTableHorizontal] 更新情報 が無い。");
		_Log("[_GetMasterTableHorizontal] end.");
		return null;
	}

	//タブインデックスをコピーする。
	$bufTabindex = $tabindex;

	$res = null;
	$res .= "<table class=\"horizontal\">";
	$res .= "\n";
	//ヘッダー行(項目名)を設定する。
	$res .= "<thead>";
	$res .= "\n";
	$res .= "<tr>";
	$res .= "\n";
	$res .= "<td class=\"colHead\">";
	$res .= "No";
	$res .= "</td>";
	$res .= "\n";

	foreach ($tblList as $key => $tblInfo) {
		$res .= "<td>";
		$res .= "\n";
		$buf = null;
		if (_IsNull($tblInfo['show_no'])) {
			$buf = $key + 1;
		} else {
			$buf = $tblInfo['show_no'];
		}
		$res .= $buf;
		$res .= "<input type=\"hidden\" name=\"update[".$key."][show_no]\" value=\"".$buf."\" />";
		$res .= "\n";
		$res .= "</td>";
		$res .= "\n";
	}

	$res .= "</tr>";
	$res .= "\n";
	$res .= "</thead>";
	$res .= "\n";
	$res .= "<tbody>";
	$res .= "\n";

	//権限で表示しない項目は、hiddenで設定する。
	$hidden4auth = null;

	$itemMaxCount = count($xmlSubList['update']['item']);

	foreach ($xmlSubList['update']['item'] as $itemKey => $itemInfo) {

		$buf = null;

		$infoCount =  0;
		foreach ($tblList as $key => $tblInfo) {

			//権限チェック
			if ($authId != AUTH_WOOROM) {
				//WOOROM権限以外の場合、表示しない。
				if ($itemInfo['auth'] == AUTH_WOOROM) {
					$hidden4auth .= "<input type=\"hidden\" name=\"update[".$key."][".$itemInfo['name']."]\" value=\"".$tblInfo[$itemInfo['name']]."\" />";
					$hidden4auth .= "\n";
					continue;
				}
			}

			//タブインデックスを上→下→左→上→下→の順にする。
			$infoCount++;
			$tabindex++;

			$tidx = 0;
			if ($infoCount == 1) {
				//1列目の場合
				$bufTabindex++;
				$tidx = $bufTabindex;
			} else {
				//2列目以降の場合
				$tidx = $bufTabindex + $itemMaxCount * ($infoCount - 1);
			}


			$error = null;
			if (isset($info['error'][$key][$itemInfo['name']])) {
				$error = "class=\"error\"";
			}

			$buf .= "<td>";

			switch ($itemInfo['type']) {
				case 'text':
					$buf .= "<input type=\"text\" name=\"update[".$key."][".$itemInfo['name']."]\" size=\"".$itemInfo['size']."\" maxlength=\"".$colInfo[$itemInfo['name']]['Size']."\" tabindex=\"".$tidx."\" value=\"".$tblInfo[$itemInfo['name']]."\" ".$error." />";
					break;
				case 'textarea':
					$buf .= "<textarea name=\"update[".$key."][".$itemInfo['name']."]\" rows=\"".$itemInfo['rows']."\" cols=\"".$itemInfo['cols']."\" tabindex=\"".$tidx."\" ".$error.">".$tblInfo[$itemInfo['name']]."</textarea>";
					break;
				case 'select':
					$itemInfo['parameter']['name'] = "update[".$key."][".$itemInfo['name']."]";
					$itemInfo['parameter']['default'] = $tblInfo[$itemInfo['name']];
					$itemInfo['parameter']['tabindex'] = $tidx;
					$itemInfo['parameter']['option'] = $error;
					$buf .= _GetSelect4Array($itemInfo['parameter']);
					break;
				case 'radio':
					$itemInfo['parameter']['name'] = "update[".$key."][".$itemInfo['name']."]";
					$itemInfo['parameter']['default'] = $tblInfo[$itemInfo['name']];
					$itemInfo['parameter']['tabindex'] = $tidx;
					$itemInfo['parameter']['option'] = $error;
					$buf .= _GetRadio4Array($itemInfo['parameter'], $tabindex);
					break;
				case 'checkbox':
					$itemInfo['parameter']['name'] = "update[".$key."][".$itemInfo['name']."]";
					$itemInfo['parameter']['default'] = $tblInfo[$itemInfo['name']];
					$itemInfo['parameter']['tabindex'] = $tidx;
					$itemInfo['parameter']['option'] = $error;
					$buf .= _GetCheckbox4Array($itemInfo['parameter'], $tabindex);
					break;
				case 'hidden':
					$buf .= "<input type=\"hidden\" name=\"update[".$key."][".$itemInfo['name']."]\" value=\"".$tblInfo[$itemInfo['name']]."\" />";
					break;
				case 'flag':
					$checked = null;
					if ($tblInfo[$itemInfo['name']] == '1') $checked = "checked=\"checked\"";
					$buf .= "<input type=\"checkbox\" name=\"update[".$key."][".$itemInfo['name']."]\" tabindex=\"".$tidx."\" value=\"1\" ".$checked." />";
					break;
				case 'label':
					$buf .= $tblInfo[$itemInfo['name']];
					$buf .= "<input type=\"hidden\" name=\"update[".$key."][".$itemInfo['name']."]\" value=\"".$tblInfo[$itemInfo['name']]."\" />";
					break;
				case 'label_only':
					$buf .= "&nbsp;";
					break;
				case 'select_plan_details':

					//プラン詳細マスタの情報を取得する。
					$mstList = $itemInfo['parameter']['list'];
					//プラン詳細マスタの情報の内、自分のプランの情報のみ取得し、上書きする。
					$itemInfo['parameter']['list'] = $mstList[$tblInfo['plan_id']];


					$itemInfo['parameter']['name'] = "update[".$key."][".$itemInfo['name']."]";
					$itemInfo['parameter']['default'] = $tblInfo[$itemInfo['name']];
					$itemInfo['parameter']['tabindex'] = $tidx;
					$itemInfo['parameter']['option'] = $error;
					$buf .= _GetSelect4Array($itemInfo['parameter']);
					break;



				case 'xxx':
					break;
			}

			$buf .= "</td>";
			$buf .= "\n";

		}

		if (!_IsNull($buf)) {
			$res .= "<tr>";
			$res .= "\n";

			//ツールチップを設定する。
			$toolTip = null;
			if (isset($itemInfo['tool_tip_title']) && !_IsNull($itemInfo['tool_tip_title'])) {
				$toolTip .= $itemInfo['tool_tip_title'];
			}
			if (isset($itemInfo['tool_tip_text']) && !_IsNull($itemInfo['tool_tip_text'])) {
				$toolTip .= "::";
				$toolTip .= $itemInfo['tool_tip_text'];
			}

			$res .= "<td";
			if (!_IsNull($toolTip)) $res .= " class=\"colHead tips\" title=\"".$toolTip."\"";
			$res .= ">";
			$res .= $itemInfo['label']."";
			if ($itemInfo['required']) $res .= "<span class=\"required\">※</span>";
			$res .= "</td>";
			$res .= "\n";
			$res .= $buf;
			$res .= "</tr>";
			$res .= "\n";
		}

	}

	$res .= "</tbody>\n";

	$res .= "</table>\n";
	$res .= $hidden4auth;

	_Log("[_GetMasterTableHorizontal] 結果 = '".$res."'");
	_Log("[_GetMasterTableHorizontal] end.");
	return $res;
}

/**
 * マスタ情報の入力値チェックをする。
 *
 * @param	array	$xmlList		XMLを読み込んだ配列
 * @param	int  	$info			初期値
 * @param	array  	$errList		エラー項目を格納して返す配列
 * @return	string	エラーメッセージ{null:エラー無/null以外:エラー有}
 * @access  public
 * @since
 */
function _CheackMasterTable($xmlList, $info, &$errList) {

	_Log("[_CheackMasterTable] start.");

    _Log("[_CheackMasterTable] (param) XMLを読み込んだ配列 = '".print_r($xmlList,true)."'");
    _Log("[_CheackMasterTable] (param) 初期値 = '".print_r($info,true)."'");
    _Log("[_CheackMasterTable] (param) エラー項目を格納して返す配列 = '".print_r($errList,true)."'");


	//DBをオープンする。
	$link = _DB_Open();

	//テーブルのフィールド情報を取得する。→maxlengthに使用する。
	$colInfo = _DB_GetColumnsInfo($info['condition']['mst_name']);

	//XMLから該当のマスタの情報を取得する。
	$xmlSubList = $xmlList[$info['condition']['mst_name']];

	$message = null;

	//入力値のチェックをする。
	if (isset($xmlSubList['update'])) {
		foreach ($info['update'] as $key => $tblInfo) {

			foreach ($xmlSubList['update']['item'] as $itemKey => $itemInfo) {

				$msgType = null;
				switch ($itemInfo['type']) {
					case 'text':
					case 'textarea':
						$msgType = "入力";
						break;
					case 'select':
					case 'radio':
					case 'checkbox':
						$msgType = "選択";
						break;
					case 'flag':
					case 'hidden':
					case 'label':
					case 'label_show_no':
						continue 2;
						break;
					case 'xxx':
						break;
				}

				$buf = null;

				//必須チェック
				if ($itemInfo['required']) {
					//更新情報の場合、チェックする。
					if (!preg_match ('/^add.*$/', $key)) {
						if (_IsNull($tblInfo[$itemInfo['name']])) {
							$buf .= "No.".$tblInfo['show_no']."の".$itemInfo['label']."を".$msgType."してください。\n";
						}
					}
				}

				//文字列長チェック
				//入力項目の場合
				switch ($itemInfo['type']) {
					case 'text':
					case 'textarea':
						if (_IsMaxLength($tblInfo[$itemInfo['name']], $colInfo[$itemInfo['name']]['Size'])) {
							$buf .= "No.".$tblInfo['show_no']."の".$itemInfo['label']."は".$colInfo[$itemInfo['name']]['Size']."文字以内でしてください。(全角文字は2文字として扱っています。)\n";
						}
						break;
				}


				//半角数字＋マイナス(-)チェック
				switch ($colInfo[$itemInfo['name']]['TypeOnly']) {
					case 'int':
						if (!_IsHalfSizeNumericMinus($tblInfo[$itemInfo['name']])) {
							$buf .= "No.".$tblInfo['show_no']."の".$itemInfo['label']."は半角数字でしてください。\n";
						}
						break;
				}


				if (!_IsNull($buf)) {
					$message .= $buf;
					$errList[$key][$itemInfo['name']] = true;
				}
			}
		}
	}


	_Log("[_CheackMasterTable] 結果 = '".$message."'");

	//DBをクローズする。
	_DB_Close($link);
	_Log("[_CheackMasterTable] end.");

	return $message;

}


/**
 * マスタ情報の更新・追加をする。
 *
 * @param	array	$xmlList		XMLを読み込んだ配列
 * @param	int  	$info			初期値
 * @param	array  	$returnList		更新・登録数を返す配列
 * @return	string	エラーメッセージ{null:エラー無/null以外:エラー有}
 * @access  public
 * @since
 */
function _UpdateMasterTable($xmlList, $info, &$returnList) {

	_Log("[_UpdateMasterTable] start.");

    _Log("[_UpdateMasterTable] (param) XMLを読み込んだ配列 = '".print_r($xmlList,true)."'");
    _Log("[_UpdateMasterTable] (param) 初期値 = '".print_r($info,true)."'");

	//更新・登録数を初期化する。
	$returnList['count']['update'] = 0;
	$returnList['count']['create'] = 0;
	$returnList['create']['id'] = array();

	//DBをオープンする。
	$link = _DB_Open();

	//テーブルのフィールド情報を取得する。→maxlengthに使用する。
	$colInfo = _DB_GetColumnsInfo($info['condition']['mst_name']);

	//XMLから該当のマスタの情報を取得する。
	$xmlSubList = $xmlList[$info['condition']['mst_name']];

	$message = null;

	//マスタ情報の更新・登録をする。
	if (isset($xmlSubList['update'])) {
		foreach ($info['update'] as $key => $tblInfo) {
			_Log("[_UpdateMasterTable] ************************************************************");
			_Log("[_UpdateMasterTable] key = '".$key."'");

			//必須項目が全て入力有か？
			foreach ($xmlSubList['update']['item'] as $itemKey => $itemInfo) {
				//必須項目の場合、入力有か確認する。
				if ($itemInfo['required']) {
					if (_IsNull($tblInfo[$itemInfo['name']])) {
						//入力無の場合、次のループへ進む。
						_Log("[_UpdateMasterTable] 必須項目'".$itemInfo['name']."'が入力無-->次へ");
						continue 2;
					}
				}
			}

			//主キーが設定されているか？
			$priCount = 0;					//主キーをカウントする。
			$priInputCount = 0;				//主キーの内、設定済みをカウントする。
			$priNameList = array();			//主キーのフィールド名を設定する。
			$priInputNameList = array();	//主キーの内、設定済みのフィールド名を設定する。
			foreach ($colInfo as $colKey => $col) {
				if ($col['Key'] == 'PRI') {
					$priCount++;
					$priNameList[] = $col['Field'];
					if (!_IsNull($tblInfo[$col['Field']])) {
						$priInputCount++;
						$priInputNameList[] = $col['Field'];
					}
				}
			}
			_Log("[_UpdateMasterTable] ------------------------------------------------------------");
			_Log("[_UpdateMasterTable] 主キーの数 = '".$priCount."'");
			_Log("[_UpdateMasterTable] 入力有の主キーの数 = '".$priInputCount."'");
			_Log("[_UpdateMasterTable] 主キーのフィールド名 = '".print_r($priNameList, true)."'");
			_Log("[_UpdateMasterTable] 入力有の主キーのフィールド名 = '".print_r($priInputNameList, true)."'");

			//更新か？登録か？をチェックする。{true:更新/false:登録}
			$updateFlag = true;
			if ($priCount == 1) {
				//主キーが1つの場合

				_Log("[_UpdateMasterTable] 主キーが1つの場合");

				if ($priCount == $priInputCount) {
					//主キーが入力有の場合
					//→更新
					_Log("[_UpdateMasterTable] 主キーが1つの場合--主キーが入力有の場合-->【更新】");
				} else {
					//主キーが入力無の場合

					_Log("[_UpdateMasterTable] 主キーが1つの場合--主キーが入力無の場合");

					if ($colInfo[$priNameList[0]]['Extra'] == 'auto_increment') {
						//主キーがオートインクリメントの場合
						//→登録
						$updateFlag = false;
						_Log("[_UpdateMasterTable] 主キーが1つの場合--主キーが入力無の場合--主キーがオートインクリメントの場合-->【登録】");

					} else {
						//主キーがオートインクリメント以外の場合
						//→※主キーを設定する必要がある！
						//　　現在、オートインクリメント以外の場合は存在しないので次のループへ進む。
						//　　(必要になったら処理を追加する。採番するか、主キーのフォーマットのルールで作成するかなど…)

						_Log("[_UpdateMasterTable] 主キーが1つの場合--主キーが入力無の場合--主キーがオートインクリメント以外の場合-->次へ");
						continue;
					}
				}

			} elseif ($priCount > 1) {
				//主キーが2つ以上の場合

				_Log("[_UpdateMasterTable] 主キーが2つ以上の場合");

				if ($priCount == $priInputCount) {
					//複数の主キーが全て入力有の場合
					//→更新
					_Log("[_UpdateMasterTable] 主キーが2つ以上の場合--複数の主キーが全て入力有の場合-->【更新】");
				} elseif ($priCount - $priInputCount == 1) {
					//複数の主キーの内、1つが入力無の場合
					//→登録(入力有の主キーを条件として採番する。)
					$updateFlag = false;
					_Log("[_UpdateMasterTable] 主キーが2つ以上の場合--複数の主キーの内、1つが入力無の場合-->【登録(入力有の主キーを条件として採番する。)】");

					_Log("[_UpdateMasterTable] array_diff(\$priNameList,\$priInputNameList) = '".print_r(array_diff($priNameList,$priInputNameList), true)."'");

					//1つの入力無のフィールド名を取得する。
					//「全主キーのフィールド名」配列から「入力有の主キーのフィールド名」配列
					$bufList = array_diff($priNameList, $priInputNameList);
					$fieldName = array_shift($bufList);
					//入力有の主キーの値を取得する。
					$condition4NextNo = array();
					foreach ($priInputNameList as $priInKey => $priInField) {
						$condition4NextNo[$priInField] = $tblInfo[$priInField];
					}
					$nextNo = _DB_GetNextNo($info['condition']['mst_name'], $fieldName, $condition4NextNo, false);
					if ($nextNo === false) {
						$message = "主キーの採番に失敗した。";
						_Log("[_UpdateMasterTable] [ERROR]".$message);
						return $message;
					}
					//採番した値を設定する。
					$tblInfo[$fieldName] = $nextNo;
				} else {
					//複数の主キーの内、2つ以上が入力無の場合
					//→※主キーを設定する必要がある！
					//　　現在、この場合は存在しないので次のループへ進む。
					//　　(必要になったら処理を追加する。)
					_Log("[_UpdateMasterTable] 主キーが2つ以上の場合--複数の主キーの内、2つ以上が入力無の場合-->次へ");
					continue;
				}

			} else {
				//主キーが0の場合

				//→※現在、主キーなしのテーブルは存在しないので
				//　　(必要になったら処理を追加する。登録はできるが、更新は全項目を条件にしないといけない…)
				_Log("[_UpdateMasterTable] 主キーが0の場合-->次へ");
				continue;
			}

			_Log("[_UpdateMasterTable] 更新か？登録か？をチェック{true:更新/false:登録} = '".$updateFlag."'");


			_Log("[_UpdateMasterTable] 更新情報(編集前) = '".print_r($tblInfo,true)."'");


			//フラグの項目(チェックボックス)に値を設定する。
			foreach ($xmlSubList['update']['item'] as $itemKey => $itemInfo) {
				//必須項目の場合、入力有か確認する。
				switch ($itemInfo['type']) {
					case 'flag':
						$tblInfo[$itemInfo['name']] = ((isset($tblInfo[$itemInfo['name']]) && !_IsNull($tblInfo[$itemInfo['name']]))?$tblInfo[$itemInfo['name']]:0);
						break;
				}
			}

			//一覧の表示用のNoは、削除する。
			unset($tblInfo['show_no']);

			_Log("[_UpdateMasterTable] 更新情報(編集後：フラグ追加、No削除) = '".print_r($tblInfo,true)."'");


			if ($updateFlag) {
				//更新の場合

				//更新が有るかチェックする。
				//DBから現在の登録情報を取得する。
				$oldInfo = _DB_GetInfo($info['condition']['mst_name'], $tblInfo, false);
				_Log("[_UpdateMasterTable] 更新情報(編集後：フラグ追加、No削除) = '".print_r($tblInfo,true)."'");

				//更新情報内に配列の項目があった場合、削除する。→「配列の項目=その項目は子テーブル(関連テーブル)に登録する」なので、配列部分のチェックは、すぐ次のチェックで行う。
				$bufTblInfo = $tblInfo;
				foreach ($bufTblInfo as $bufKey => $bufValue) {
					if (is_array($bufValue)) {
						unset($bufTblInfo[$bufKey]);
					}
				}

				_Log("[_UpdateMasterTable] 更新情報(編集後：配列項目削除) = '".print_r($bufTblInfo,true)."'");
				_Log("[_UpdateMasterTable] 更新情報(DBの情報) = '".print_r($oldInfo,true)."'");


//array_diffは、キーを見ないで差分をとるのでここでは使えない。
//				$diff1List = array_diff($oldInfo, $bufTblInfo);
//				_Log("[_UpdateMasterTable] 更新情報(差分1) = '".print_r($diff1List,true)."'");
//				$diff2List = array_diff($bufTblInfo, $oldInfo);
//				_Log("[_UpdateMasterTable] 更新情報(差分2) = '".print_r($diff2List,true)."'");

				$diff1List = array_diff_assoc($oldInfo, $bufTblInfo);
				_Log("[_UpdateMasterTable] 更新情報(差分1){array_diff_assoc} = '".print_r($diff1List,true)."'");
				$diff2List = array_diff_assoc($bufTblInfo, $oldInfo);
				_Log("[_UpdateMasterTable] 更新情報(差分2){array_diff_assoc} = '".print_r($diff2List,true)."'");

				$parentUpdateFlag = false;
				if (count($diff1List) == 0 && count($diff2List) == 0) {
					//差分無し。
					_Log("[_UpdateMasterTable] 差分無し");
				} else {
					//差分有りなので、更新する。
					_Log("[_UpdateMasterTable] 差分有り-->更新する。");
					$parentUpdateFlag = true;
				}


				//項目内に子テーブル(関連テーブル)がある場合、子テーブルの情報も更新が有るかチェックする。
				_Log("[_UpdateMasterTable] {項目内の子テーブル(関連テーブル)更新有無チェック}-------------------------------開始");
				$childUpdateFlag = false;
				if (isset($xmlSubList['update'])) {
					foreach ($xmlSubList['update']['item'] as $itemKey => $itemInfo) {
						if (isset($itemInfo['child_table_name']) && !_IsNull($itemInfo['child_table_name'])) {


							_Log("[_UpdateMasterTable] {項目内の子テーブル(関連テーブル)更新有無チェック} 項目名(label) = '".$itemInfo['label']."'");
							_Log("[_UpdateMasterTable] {項目内の子テーブル(関連テーブル)更新有無チェック} 項目名(name) = '".$itemInfo['name']."'");
							_Log("[_UpdateMasterTable] {項目内の子テーブル(関連テーブル)更新有無チェック} 子テーブル名 = '".$itemInfo['child_table_name']."'");
							_Log("[_UpdateMasterTable] {項目内の子テーブル(関連テーブル)更新有無チェック} 子テーブルの検索キー = '".$itemInfo['child_table_condition_key']."'");
							_Log("[_UpdateMasterTable] {項目内の子テーブル(関連テーブル)更新有無チェック} 子テーブルの更新キー = '".$itemInfo['child_table_update_key']."'");
							_Log("[_UpdateMasterTable] {項目内の子テーブル(関連テーブル)更新有無チェック} 親テーブルの検索キー = '".$itemInfo['parent_table_condition_key']."'");

							//DBから現在の登録情報を取得する。
							//子テーブルの検索条件を設定する。
							$condition4Child = array();
							//親テーブルの値を子テーブルの項目の条件とする。(親テーブル.ID→子テーブル.ID)
							$condition4Child[$itemInfo['child_table_condition_key']] = $tblInfo[$itemInfo['parent_table_condition_key']];
							//子テーブル情報を取得する。連想配列で取得する。
							$oldChildList = _DB_GetListByAssociative($itemInfo['child_table_name'], $itemInfo['child_table_update_key'], null, $condition4Child, false);

							_Log("[_UpdateMasterTable] {項目内の子テーブル(関連テーブル)更新有無チェック} 更新情報(DBの情報) = '".print_r($oldChildList,true)."'");
							_Log("[_UpdateMasterTable] {項目内の子テーブル(関連テーブル)更新有無チェック} 更新情報(入力情報) = '".print_r($tblInfo[$itemInfo['name']],true)."'");

							$diffChild1List = array();
							$diffChild2List = array();
							if (_IsNull($oldChildList)) {
								if (!_IsNull($tblInfo[$itemInfo['name']]) && count($tblInfo[$itemInfo['name']]) > 0) {
									$diffChild1List = $tblInfo[$itemInfo['name']];
									$diffChild2List = $tblInfo[$itemInfo['name']];
								}
							} else {
								//array_diffは、キーを見ないで差分をとる。
								$diffChild1List = array_diff($oldChildList, $tblInfo[$itemInfo['name']]);
								_Log("[_UpdateMasterTable] {項目内の子テーブル(関連テーブル)更新有無チェック} 更新情報(差分1){array_diff} = '".print_r($diffChild1List,true)."'");
								$diffChild2List = array_diff($tblInfo[$itemInfo['name']], $oldChildList);
								_Log("[_UpdateMasterTable] {項目内の子テーブル(関連テーブル)更新有無チェック} 更新情報(差分2){array_diff} = '".print_r($diffChild2List,true)."'");
							}

							if (count($diffChild1List) == 0 && count($diffChild2List) == 0) {
								//差分無し。
								_Log("[_UpdateMasterTable] {項目内の子テーブル(関連テーブル)更新有無チェック} 差分無し");
							} else {
								//差分有りなので、更新する。
								_Log("[_UpdateMasterTable] {項目内の子テーブル(関連テーブル)更新有無チェック} 差分有り-->更新する。");
								$childUpdateFlag = true;
							}

						}
					}
				}

				_Log("[_UpdateMasterTable] {項目内の子テーブル(関連テーブル)更新有無チェック}-------------------------------終了");


				if (!$parentUpdateFlag && !$childUpdateFlag) {
					//差分無しなので、更新しない。
					_Log("[_UpdateMasterTable] 差分無し-->更新しない。");

				} else {
					//差分有りなので、更新する。
					_Log("[_UpdateMasterTable] 差分有り-->更新する。");

					//更新IPと更新日を設定する。
					if (isset($tblInfo['update_ip'])) $tblInfo['update_ip'] = $_SERVER["REMOTE_ADDR"];	//更新IP
					if (isset($tblInfo['update_date'])) $tblInfo['update_date'] = null;				//更新日

					$res = _DB_SaveInfo($info['condition']['mst_name'], $tblInfo);
					if ($res === false) {
						$message = "更新に失敗した。";
						_Log("[_UpdateMasterTable] [ERROR]".$message);
						return $message;
					}
					$returnList['count']['update']++;

					//項目内に子テーブル(関連テーブル)がある場合、子テーブルに削除、登録する。
					$res = _UpdateChildMasterTable($xmlSubList, $tblInfo);
					if ($res === false) {
						$message = "更新に失敗した。";
						_Log("[_UpdateMasterTable] [ERROR] {項目内の子テーブル(関連テーブル)の削除＆登録} ".$message);
						return $message;
					}

				}

			} else {
				//登録の場合

				//更新IPと更新日を設定する。
				if (isset($tblInfo['create_ip'])) $tblInfo['create_ip'] = $_SERVER["REMOTE_ADDR"];	//作成IP
				if (isset($tblInfo['create_date'])) $tblInfo['create_date'] = null;				//作成日
				if (isset($tblInfo['update_ip'])) $tblInfo['update_ip'] = $_SERVER["REMOTE_ADDR"];	//更新IP
				if (isset($tblInfo['update_date'])) $tblInfo['update_date'] = null;				//更新日

				$res = _DB_CreateInfo($info['condition']['mst_name'], $tblInfo);
				if ($res === false) {
					$message = "登録に失敗した。";
					_Log("[_UpdateMasterTable] [ERROR]".$message);
					return $message;
				}
				$returnList['count']['create']++;
				$returnList['create']['id'][] = $res;

				//項目内に子テーブル(関連テーブル)がある場合、子テーブルに削除、登録する。
				$res = _UpdateChildMasterTable($xmlSubList, $tblInfo, $res);
				if ($res === false) {
					$message = "登録に失敗した。";
					_Log("[_UpdateMasterTable] [ERROR] {項目内の子テーブル(関連テーブル)の削除＆登録} ".$message);
					return $message;
				}

			}

		}
	}


	_Log("[_UpdateMasterTable] {結果}エラーメッセージ = '".$message."'");
	_Log("[_UpdateMasterTable] {結果}更新・登録数を返す配列 = '".print_r($returnList,true)."'");

	//DBをクローズする。
	_DB_Close($link);
	_Log("[_UpdateMasterTable] end.");

	return $message;

}

/**
 * 子マスタ情報の更新・追加をする。
 *
 * @param	array	$xmlSubList		XMLを読み込んだ配列の一部
 * @param	array  	$tblInfo		1データ分の更新情報
 * @param	int  	$parentId		親マスタのID(新規採番された場合)
 * @return	boolean	結果{true:成功/false:失敗}
 * @access  public
 * @since
 */
function _UpdateChildMasterTable($xmlSubList, $tblInfo, $parentId = null) {
	_Log("[_UpdateChildMasterTable] start.");

	_Log("[_UpdateChildMasterTable] (param) XMLを読み込んだ配列の一部 = '".print_r($xmlSubList,true)."'");
	_Log("[_UpdateChildMasterTable] (param) 1データ分の更新情報 = '".print_r($tblInfo,true)."'");
	_Log("[_UpdateChildMasterTable] (param) 親マスタのID = '".$parentId."'");


	//項目内に子テーブル(関連テーブル)がある場合、子テーブルに削除、登録する。
	_Log("[_UpdateChildMasterTable] {項目内の子テーブル(関連テーブル)の削除＆登録}-------------------------------開始");
	if (isset($xmlSubList['update'])) {
		foreach ($xmlSubList['update']['item'] as $itemKey => $itemInfo) {
			if (isset($itemInfo['child_table_name']) && !_IsNull($itemInfo['child_table_name'])) {

				_Log("[_UpdateChildMasterTable] {項目内の子テーブル(関連テーブル)の削除＆登録} ++++++++++++++++++++++++++++++++++++++++++++++++");
				_Log("[_UpdateChildMasterTable] {項目内の子テーブル(関連テーブル)の削除＆登録} 項目名(label) = '".$itemInfo['label']."'");
				_Log("[_UpdateChildMasterTable] {項目内の子テーブル(関連テーブル)の削除＆登録} 項目名(name) = '".$itemInfo['name']."'");
				_Log("[_UpdateChildMasterTable] {項目内の子テーブル(関連テーブル)の削除＆登録} 子テーブル名 = '".$itemInfo['child_table_name']."'");
				_Log("[_UpdateChildMasterTable] {項目内の子テーブル(関連テーブル)の削除＆登録} 子テーブルの検索キー = '".$itemInfo['child_table_condition_key']."'");
				_Log("[_UpdateChildMasterTable] {項目内の子テーブル(関連テーブル)の削除＆登録} 子テーブルの更新キー = '".$itemInfo['child_table_update_key']."'");
				_Log("[_UpdateChildMasterTable] {項目内の子テーブル(関連テーブル)の削除＆登録} 親テーブルの検索キー = '".$itemInfo['parent_table_condition_key']."'");

				//一旦削除する。
				//子テーブルの削除条件を設定する。
				$condition4ChildDelete = array();
				//親テーブルの値を子テーブルの項目の条件とする。(親テーブル.ID→子テーブル.ID)
				$bufParentId = null;
				if (_IsNull($parentId)) {
					$bufParentId = $tblInfo[$itemInfo['parent_table_condition_key']];
				} else {
					$bufParentId = $parentId;
				}
				$condition4ChildDelete[$itemInfo['child_table_condition_key']] = $bufParentId;

				$res = _DB_DeleteInfo($itemInfo['child_table_name'], $condition4ChildDelete);
				if ($res === false) {
					$message = "更新に失敗した。";
					_Log("[_UpdateChildMasterTable] [ERROR] {項目内の子テーブル(関連テーブル)の削除＆登録} ".$message);
					return false;
				}

				//新たに登録する。
				if (isset($tblInfo[$itemInfo['name']])) {
					foreach ($tblInfo[$itemInfo['name']] as $childId) {

						$bufParentId = null;
						if (_IsNull($parentId)) {
							$bufParentId = $tblInfo[$itemInfo['parent_table_condition_key']];
						} else {
							$bufParentId = $parentId;
						}

						//子テーブルへの登録情報を設定する。
						$childTblInfo = array();
						$childTblInfo[$itemInfo['child_table_condition_key']] = $bufParentId;	//主キー1(親テーブルの主キー)
						$childTblInfo[$itemInfo['child_table_update_key']] = $childId;			//主キー2(子テーブルの主キー)

						$childTblInfo['del_flag'] = DELETE_FLAG_NO;								//削除フラグ
						$childTblInfo['create_ip'] = $_SERVER["REMOTE_ADDR"];						//作成IP
						$childTblInfo['create_date'] = null;										//作成日
						$childTblInfo['update_ip'] = $_SERVER["REMOTE_ADDR"];						//更新IP
						$childTblInfo['update_date'] = null;										//更新日

						$res = _DB_CreateInfo($itemInfo['child_table_name'], $childTblInfo);
						if ($res === false) {
							$message = "更新に失敗した。";
							_Log("[_UpdateChildMasterTable] [ERROR] {項目内の子テーブル(関連テーブル)の削除＆登録} ".$message);
							return false;
						}
					}
				}
			}
		}
	}
	_Log("[_UpdateChildMasterTable] {項目内の子テーブル(関連テーブル)の削除＆登録}-------------------------------終了");
	_Log("[_UpdateChildMasterTable] end.");
	return true;
}

?>
