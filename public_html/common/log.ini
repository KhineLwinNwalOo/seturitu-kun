<?php
/*
 * [新★会社設立.JP ツール]
 * ログ関連ファイル
 *
 * 更新履歴：2008/12/01	d.ishikawa	新規作成
 *
 */


//ログ出力先ファイル名(パス)
define('LOG_FILE_NAME', dirname(__FILE__).'/log/seturitu-kun.com.log');

//ログファイルが最大サイズを超えた場合に変更するファイル名(パス)
//注意：必ず'%s'を含めたファイル名にすること。'%s'に日付が置き換わります。
define('LOG_FILE_NEW_NAME', dirname(__FILE__).'/log/seturitu-kun.com_%s.log');


//ログファイル最大サイズ(単位:バイト)
define('LOG_FILE_MAX_SIZE', 2000000);

//ログ出力先レベル
//0:出力しない
//1:レベル1(重要)
//2:レベル2(SQLなど。)
//3:レベル3(通常・デバッグ用に出力する。)
//4:レベル4
//5:レベル5
//設定したレベルより重要なレベルを出力する。
//例)3を設定した場合、1、2、3を出力する。
//例)2を設定した場合、1、2を出力する。
//例)0を設定した場合、ログファイルに出力しない。
define('LOG_LEVEL', 3);

//ログを出力するIP
$_LOG_IP_LIST = array('210.148.130.185');
//$_LOG_IP_LIST =null;


//デバッグ用
//define('_LOG_DEBUG_', true);
define('_LOG_DEBUG_', false);


/**
 * ログを出力する。
 * 引き数  $message:出力メッセージ
 * 戻り値  LinkID
 */
function _Log($message, $level = 3) {
	global $_LOG_IP_LIST;

	if (_LOG_DEBUG_) print "\n[_Log] start.";


	if (_LOG_DEBUG_) print "\n[引数]出力メッセージ='".$message."'";
	if (_LOG_DEBUG_) print "\n[引数]ログ出力先レベル='".$level."'";

	if (_LOG_DEBUG_) print "\n[定数]ログ出力先レベル='".LOG_LEVEL."'";
	if (_LOG_DEBUG_) print "\n[定数]ログ出力先ファイル名(パス)='".LOG_FILE_NAME."'";
	if (_LOG_DEBUG_) print "\n[定数]ログファイルが最大サイズを超えた場合に変更するファイル名(パス)='".LOG_FILE_NEW_NAME."'";
	if (_LOG_DEBUG_) print "\n[定数]ログファイル最大サイズ(単位:バイト)='".LOG_FILE_MAX_SIZE."'";
	if (_LOG_DEBUG_) print "\n[定数]ログ出力IP='".print_r($_LOG_IP_LIST,true)."'";


	//設定されているログ出力先レベルを確認する。
	//0の場合、ログファイルに出力しない。
	if (LOG_LEVEL == 0) {
		if (_LOG_DEBUG_) print "\n[処理結果]ログ出力先レベルが0なのでログファイルに出力しない。";
		if (_LOG_DEBUG_) print "\n[_Log] end.";
		return;
	}

	//ログ出力先レベルを確認する。
	if ($level > LOG_LEVEL) {
		if (_LOG_DEBUG_) print "\n[処理結果]出力しないログ出力先レベルなのでログファイルに出力しない。";
		if (_LOG_DEBUG_) print "\n[_Log] end.";
		return;
	}

	//ログを出力するIPを確認する。
	if (_LOG_DEBUG_) print "\n[処理結果] IP = '".$_SERVER["REMOTE_ADDR"]."'";
	if (is_array($_LOG_IP_LIST)) {
		if (in_array($_SERVER['REMOTE_ADDR'], $_LOG_IP_LIST)) {
			if (_LOG_DEBUG_) print "\n[処理結果] ログ出力IPに存在するので、ログファイルに出力する。";
		} else {
			if (_LOG_DEBUG_) print "\n[処理結果] ログ出力IPに存在しないので、ログファイルに出力しない。";
			if (_LOG_DEBUG_) print "\n[_Log] end.";
			return;
		}
	} else {
		if (_LOG_DEBUG_) print "\n[処理結果] ログ出力IPが未設定なので、ログファイルに出力する。";
	}


	//ログファイルの存在を確認する。
	$exists = file_exists(LOG_FILE_NAME);
	if (_LOG_DEBUG_) print "\n[処理結果]ログファイルの存在確認='".$exists."'";

	//ログファイルが存在する場合
	if ($exists) {
		//ログファイルのサイズを取得する。
		$size = filesize(LOG_FILE_NAME);
		if (_LOG_DEBUG_) print "\n[処理結果]ログファイルのサイズ='".$size."'";

		//ログファイルのサイズが最大サイズを超えていた場合、ファイル名を変更する。
		if ($size > LOG_FILE_MAX_SIZE) {
			if (_LOG_DEBUG_) print "\n[処理結果]ログファイル最大サイズを超えています。";

			$existsNewFile = true;
			//変更後のファイル名が存在する場合、存在しないファイル名を取得するまで繰り返す。
			while ($existsNewFile) {

				//変更後のファイル名を設定する。
				$newFileName = sprintf(LOG_FILE_NEW_NAME, date('Ymd_His'));
				if (_LOG_DEBUG_) print "\n[処理結果]変更後のファイル名='".$newFileName."'";

				//変更後のファイル名が存在を確認する。
				$existsNewFile = file_exists($newFileName);
				if (_LOG_DEBUG_) print "\n[処理結果]変更後のファイル名の存在確認='".$existsNewFile."'";

			}

//			//ファイル名を変更する。
//			rename(LOG_FILE_NAME, $newFileName);
//			if (_LOG_DEBUG_) print "\n[処理結果]ファイル名の変更完了。";

			//ファイル名を変更する。
			copy(LOG_FILE_NAME, $newFileName);
			if (_LOG_DEBUG_) print "\n[処理結果]ログファイルのコピー完了(ファイル名変更完了)。";


			//ログファイルを削除する。
			unlink(LOG_FILE_NAME);
			if (_LOG_DEBUG_) print "\n[処理結果]旧ログファイルの削除完了。";

		}

	}

	//ログファイルに書き出す文字列を設定する。
//	$outMessege = "[".date('Y/m/d H:i:s')."]\t".$message."\n";
	$outMessege = "[".date('Y/m/d H:i:s')."] "."[".$_SERVER['REMOTE_ADDR']."] ".$message."\n";

//	sleep(2);

	//ログファイルに書き込む。
//	@error_log($outMessege ,3, LOG_FILE_NAME);
	$res = @error_log($outMessege ,3, LOG_FILE_NAME);
	if ($res) {
		if (_LOG_DEBUG_) print "\n[処理結果]ログファイルに書き込み完了。";
	} else {
		if (_LOG_DEBUG_) print "\n[処理結果]ログファイルに書き込みに失敗しました。";
	}


	if (_LOG_DEBUG_) print "\n[_Log] end.";

}

/**
 * ログを削除する。
 * 引き数
 * 戻り値
 */
function _LogDelete() {
	//ログファイルを削除する。
	@unlink(LOG_FILE_NAME);
}

/**
 * ログをバックアップする。
 * 引き数
 * 戻り値
 */
function _LogBackup() {
	$existsNewFile = true;
	//変更後のファイル名が存在する場合、存在しないファイル名を取得するまで繰り返す。
	while ($existsNewFile) {
		//変更後のファイル名を設定する。
		$newFileName = sprintf(LOG_FILE_NEW_NAME, date('Ymd_His'));
		//変更後のファイル名が存在を確認する。
		$existsNewFile = file_exists($newFileName);
	}

	//ファイル名を変更する。
	@copy(LOG_FILE_NAME, $newFileName);
	//ログファイルを削除する。
	@unlink(LOG_FILE_NAME);
}

?>
