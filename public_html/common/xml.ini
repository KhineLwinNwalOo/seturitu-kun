<?php
/*
 * [新★会社設立.JP ツール]
 * XML処理用関数ファイル
 *
 * 更新履歴：2008/12/01	d.ishikawa	新規作成
 *
 */

//クラスは使用しない。XMLを変更したらこのクラスも変更しないといけないので…情報は配列で扱う。
//class User {
//	var $name;  // aa name
//	var $e_mail;    // three letter symbol
//	var $tel;  // one letter code
//	var $mobile;  // hydrophobic, charged or neutral
//
//	function User ($aa) {
//		foreach ($aa as $k=>$v)
//			$this->$k = $aa[$k];
//	}
//}


function _Xml2Array($filename) {
	require_once 'XML/Unserializer.php';


	//XMLファイルの内容を文字列として全て取得する。
	$data = file_get_contents($filename);

//	//XMLファイルの内容を文字列として全て取得する。
//	//file()で配列で取得し、implode()で配列を連結する。
//	$data = implode("",file($filename));

	$parser = xml_parser_create();
	xml_parser_set_option($parser,XML_OPTION_CASE_FOLDING,0);
	xml_parser_set_option($parser,XML_OPTION_SKIP_WHITE,1);
	xml_parse_into_struct($parser,$data,$values,$tags);
	xml_parser_free($parser);


	$xml = $data;

	$Unserializer =& new XML_Unserializer();
	$Unserializer->setOption('parseAttributes', TRUE);
	$status = $Unserializer->unserialize($xml);
	if (PEAR::isError($status)) {
	    die($status->getMessage());
	}

//	print_r($Unserializer->getUnserializedData());

	return $Unserializer->getUnserializedData();
}

function _Array2Xml($data, $filename, $options = null) {
	require_once 'XML/Serializer.php';

	$defaultOptions = array(
		 XML_SERIALIZER_OPTION_INDENT => "\t"
		,XML_SERIALIZER_OPTION_XML_DECL_ENABLED => TRUE
		,XML_SERIALIZER_OPTION_CLASSNAME_AS_TAGNAME => TRUE
	);

	if (is_array($options)) {
		$options = array_merge($defaultOptions, $options);
	} else {
		$options = $defaultOptions;
	}

	$Serializer =& new XML_Serializer($options);
	$status = $Serializer->serialize($data);
	if (PEAR::isError($status)) {
		die($status->getMessage());
	}

	//配列からXML形式の文字列を取得する。
	$xml = $Serializer->getSerializedData();

	$res = false;

	//XMLファイルに書き込む。
	//$res = file_put_contents($filename, $xml);//→PHP5で追加
	//XMLファイルをオープンする。
	$fp = fopen($filename, 'w');
	if ($fp !== false) {
		//XMLファイルを排他的ロックする。
		if (flock($fp, LOCK_EX) !== false) {
			//XMLファイルに書き込む。
			if (fwrite($fp, $xml) !== false) {
				//XMLファイルを排他的ロック解除する。
				if (flock($fp, LOCK_UN) !== false) {
					//XMLファイルをクローズする。
					if (fclose($fp) !== false) {
						//$res = true;
						$res = $xml;
					}
				}
			}
		}
	}

	return $res;
}



function _ReadDatabase_test($filename, $keyName) {
	$file = $filename;

	$xml_parser = xml_parser_create();

	if (!($fp = fopen($file, "r"))) {
	    die("could not open XML input");
	}

	$data = fread($fp, filesize($file));
	fclose($fp);
	xml_parse_into_struct($xml_parser, $data, $vals, $index);
	xml_parser_free($xml_parser);

print_r($vals);
print_r($index);

	$params = array();
	$level = array();
	foreach ($vals as $xml_elem) {
	  if ($xml_elem['type'] == 'open') {
	    if (array_key_exists('attributes',$xml_elem)) {
	      list($level[$xml_elem['level']],$extra) = array_values($xml_elem['attributes']);
	    } else {
	      $level[$xml_elem['level']] = $xml_elem['tag'];
	    }
	  }
	  if ($xml_elem['type'] == 'complete') {
	    $start_level = 1;
	    $php_stmt = '$params';
	    while($start_level < $xml_elem['level']) {
	      $php_stmt .= '[$level['.$start_level.']]';
	      $start_level++;
	    }
	    $php_stmt .= '[$xml_elem[\'tag\']] = $xml_elem[\'value\'];';
	    eval($php_stmt);
	  }
	}
	return $params;
}









function _ReadDatabase($filename, $keyName) {
	// read the xml database of aminoacids

	//XMLファイルの内容を文字列として全て取得する。
	$data = file_get_contents($filename);

//	//XMLファイルの内容を文字列として全て取得する。
//	//file()で配列で取得し、implode()で配列を連結する。
//	$data = implode("",file($filename));

	$parser = xml_parser_create();
	xml_parser_set_option($parser,XML_OPTION_CASE_FOLDING,0);
	xml_parser_set_option($parser,XML_OPTION_SKIP_WHITE,1);
	xml_parse_into_struct($parser,$data,$values,$tags);
	xml_parser_free($parser);

//echo "\n-01 \$values='".print_r($values,true)."'";
//echo "\n-02 \$tags='".print_r($tags,true)."'";

	$tdb = array();

	// loop through the structures
	foreach ($tags as $key=>$val) {
//		if ($key == "user") {
		if ($key == $keyName) {
			$molranges = $val;

//echo "\n01 \$molranges='".print_r($molranges,true)."'";
			// each contiguous pair of array entries are the
			// lower and upper range for each molecule definition
			for ($i=0; $i < count($molranges); $i+=2) {
				//1ユーザー分の情報を取得する。
				//XMLから取得した$values配列内の$offsetから$lenの長さの間が1ユーザーの情報が存在する。
				$offset = $molranges[$i] + 1;
				$len = $molranges[$i + 1] - $offset;
				$info = _ParseMol(array_slice($values, $offset, $len));

//				//1ユーザーのIDを取得する。
//				//XMLから取得した$values配列内の$offsetForIdの位置にID情報が存在する。
//				$offsetForId = $molranges[$i];
//				$lenForId = 1;
//				$id = _GetId(array_slice($values, $offsetForId, $lenForId));
//
//				//IDをキーとし、ユーザー情報を格納する。
//				$info['id'] = $id;
//				$tdb[$id] = $info;

				$tdb[] = $info;

//echo "\n02 \$offset='".$offset."'";
//echo "\n03 \$len='".$len."'";
//echo "\n04 \$info='".print_r($info,true)."'";
//
//echo "\n05 \$offsetForId='".$offsetForId."'";
//echo "\n06 \$lenForId='".$lenForId."'";
//echo "\n07 \$id='".$id."'";

			}
		} else {
			continue;
		}
	}

	if (count($tdb) == 0) $tdb = null;

	return $tdb;
}

function _ParseMol($mvalues) {
	for ($i=0; $i < count($mvalues); $i++)
		$mol[$mvalues[$i]["tag"]] = $mvalues[$i]["value"];
//	return new User($mol);
	return $mol;
}

//<user id="xxx">のidの値を取得する。
function _GetId($mvalues) {
//echo "\n[getId] \$mvalues='".print_r($mvalues,true)."'";

	return $mvalues[0]["attributes"]["id"];
}


?>
